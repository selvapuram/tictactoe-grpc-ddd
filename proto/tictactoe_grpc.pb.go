// proto/tictactoe.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/tictactoe.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicTacToeService_StartGame_FullMethodName          = "/tictactoe.TicTacToeService/StartGame"
	TicTacToeService_SearchPendingGames_FullMethodName = "/tictactoe.TicTacToeService/SearchPendingGames"
	TicTacToeService_JoinGame_FullMethodName           = "/tictactoe.TicTacToeService/JoinGame"
	TicTacToeService_MakeMove_FullMethodName           = "/tictactoe.TicTacToeService/MakeMove"
	TicTacToeService_GetGame_FullMethodName            = "/tictactoe.TicTacToeService/GetGame"
	TicTacToeService_GetUserStats_FullMethodName       = "/tictactoe.TicTacToeService/GetUserStats"
)

// TicTacToeServiceClient is the client API for TicTacToeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicTacToeServiceClient interface {
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error)
	SearchPendingGames(ctx context.Context, in *SearchPendingGamesRequest, opts ...grpc.CallOption) (*SearchPendingGamesResponse, error)
	JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error)
	MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*MakeMoveResponse, error)
	GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameResponse, error)
	GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error)
}

type ticTacToeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicTacToeServiceClient(cc grpc.ClientConnInterface) TicTacToeServiceClient {
	return &ticTacToeServiceClient{cc}
}

func (c *ticTacToeServiceClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartGameResponse)
	err := c.cc.Invoke(ctx, TicTacToeService_StartGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeServiceClient) SearchPendingGames(ctx context.Context, in *SearchPendingGamesRequest, opts ...grpc.CallOption) (*SearchPendingGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPendingGamesResponse)
	err := c.cc.Invoke(ctx, TicTacToeService_SearchPendingGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeServiceClient) JoinGame(ctx context.Context, in *JoinGameRequest, opts ...grpc.CallOption) (*JoinGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinGameResponse)
	err := c.cc.Invoke(ctx, TicTacToeService_JoinGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeServiceClient) MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*MakeMoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeMoveResponse)
	err := c.cc.Invoke(ctx, TicTacToeService_MakeMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeServiceClient) GetGame(ctx context.Context, in *GetGameRequest, opts ...grpc.CallOption) (*GetGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGameResponse)
	err := c.cc.Invoke(ctx, TicTacToeService_GetGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeServiceClient) GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...grpc.CallOption) (*GetUserStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserStatsResponse)
	err := c.cc.Invoke(ctx, TicTacToeService_GetUserStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicTacToeServiceServer is the server API for TicTacToeService service.
// All implementations must embed UnimplementedTicTacToeServiceServer
// for forward compatibility.
type TicTacToeServiceServer interface {
	StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error)
	SearchPendingGames(context.Context, *SearchPendingGamesRequest) (*SearchPendingGamesResponse, error)
	JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error)
	MakeMove(context.Context, *MakeMoveRequest) (*MakeMoveResponse, error)
	GetGame(context.Context, *GetGameRequest) (*GetGameResponse, error)
	GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error)
	mustEmbedUnimplementedTicTacToeServiceServer()
}

// UnimplementedTicTacToeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicTacToeServiceServer struct{}

func (UnimplementedTicTacToeServiceServer) StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedTicTacToeServiceServer) SearchPendingGames(context.Context, *SearchPendingGamesRequest) (*SearchPendingGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPendingGames not implemented")
}
func (UnimplementedTicTacToeServiceServer) JoinGame(context.Context, *JoinGameRequest) (*JoinGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGame not implemented")
}
func (UnimplementedTicTacToeServiceServer) MakeMove(context.Context, *MakeMoveRequest) (*MakeMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMove not implemented")
}
func (UnimplementedTicTacToeServiceServer) GetGame(context.Context, *GetGameRequest) (*GetGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGame not implemented")
}
func (UnimplementedTicTacToeServiceServer) GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedTicTacToeServiceServer) mustEmbedUnimplementedTicTacToeServiceServer() {}
func (UnimplementedTicTacToeServiceServer) testEmbeddedByValue()                          {}

// UnsafeTicTacToeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicTacToeServiceServer will
// result in compilation errors.
type UnsafeTicTacToeServiceServer interface {
	mustEmbedUnimplementedTicTacToeServiceServer()
}

func RegisterTicTacToeServiceServer(s grpc.ServiceRegistrar, srv TicTacToeServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicTacToeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicTacToeService_ServiceDesc, srv)
}

func _TicTacToeService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacToeService_StartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServiceServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeService_SearchPendingGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPendingGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServiceServer).SearchPendingGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacToeService_SearchPendingGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServiceServer).SearchPendingGames(ctx, req.(*SearchPendingGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeService_JoinGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServiceServer).JoinGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacToeService_JoinGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServiceServer).JoinGame(ctx, req.(*JoinGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeService_MakeMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServiceServer).MakeMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacToeService_MakeMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServiceServer).MakeMove(ctx, req.(*MakeMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeService_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServiceServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacToeService_GetGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServiceServer).GetGame(ctx, req.(*GetGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToeService_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServiceServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicTacToeService_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServiceServer).GetUserStats(ctx, req.(*GetUserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicTacToeService_ServiceDesc is the grpc.ServiceDesc for TicTacToeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicTacToeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tictactoe.TicTacToeService",
	HandlerType: (*TicTacToeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _TicTacToeService_StartGame_Handler,
		},
		{
			MethodName: "SearchPendingGames",
			Handler:    _TicTacToeService_SearchPendingGames_Handler,
		},
		{
			MethodName: "JoinGame",
			Handler:    _TicTacToeService_JoinGame_Handler,
		},
		{
			MethodName: "MakeMove",
			Handler:    _TicTacToeService_MakeMove_Handler,
		},
		{
			MethodName: "GetGame",
			Handler:    _TicTacToeService_GetGame_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _TicTacToeService_GetUserStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tictactoe.proto",
}
